using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Data; 
using Models; 

[ApiController]
[Route("[controller]")]
public class UserController : ControllerBase
{
    private readonly UserContext _context;

    public UserController(UserContext context)
    {
        _context = context;
    }

    // GET: api/
    [HttpGet]
    public async Task<ActionResult<IEnumerable<User>>> GetUsers()
    {
        return await _context.Users.ToListAsync();
    }

    // POST: api/
    [HttpPost]
    public async Task<ActionResult<User>> PostUser(User user)
    {
        _context.user.Add(user);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetUsers), new { id = user.Id }, user);
    }

    [HttpPost]
    public async Task<IActionResult> SignUp([FromBody] SignUpModel model)
    {
        var existingUser = await _context.Users.FirstOrDefaultAsync(u => u.Username == model.Username);
        if (existingUser != null)
        {
            return BadRequest("Username taken");
        }

        var user = new User
        {
            Username = model.Username,
            Pin = Services.HashService.HashPin(model.Pin),
            IsLoggedIn = false
        };

        _context.Users.Add(user);
        await _context.SaveChangesAsync();

        return Ok(new { message = "Account created successfully" });
    }

}
